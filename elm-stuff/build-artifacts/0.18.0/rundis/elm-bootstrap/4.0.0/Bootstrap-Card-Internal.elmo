var _rundis$elm_bootstrap$Bootstrap_Card_Internal$applyModifier = F2(
	function (option, options) {
		var _p0 = option;
		switch (_p0.ctor) {
			case 'Aligned':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						aligned: _elm_lang$core$Maybe$Just(_p0._0)
					});
			case 'Coloring':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						coloring: _elm_lang$core$Maybe$Just(_p0._0)
					});
			case 'TextColoring':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						textColoring: _elm_lang$core$Maybe$Just(_p0._0)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						attributes: A2(_elm_lang$core$Basics_ops['++'], options.attributes, _p0._0)
					});
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Card_Internal$defaultOptions = {
	aligned: _elm_lang$core$Maybe$Nothing,
	coloring: _elm_lang$core$Maybe$Nothing,
	textColoring: _elm_lang$core$Maybe$Nothing,
	attributes: {ctor: '[]'}
};
var _rundis$elm_bootstrap$Bootstrap_Card_Internal$cardAttributes = function (modifiers) {
	var options = A3(_elm_lang$core$List$foldl, _rundis$elm_bootstrap$Bootstrap_Card_Internal$applyModifier, _rundis$elm_bootstrap$Bootstrap_Card_Internal$defaultOptions, modifiers);
	return A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('card'),
			_1: {ctor: '[]'}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			function () {
				var _p1 = options.coloring;
				if (_p1.ctor === 'Just') {
					if (_p1._0.ctor === 'Roled') {
						return {
							ctor: '::',
							_0: A2(_rundis$elm_bootstrap$Bootstrap_Internal_Role$toClass, 'bg', _p1._0._0),
							_1: {ctor: '[]'}
						};
					} else {
						return {
							ctor: '::',
							_0: A2(_rundis$elm_bootstrap$Bootstrap_Internal_Role$toClass, 'border', _p1._0._0),
							_1: {ctor: '[]'}
						};
					}
				} else {
					return {ctor: '[]'};
				}
			}(),
			A2(
				_elm_lang$core$Basics_ops['++'],
				function () {
					var _p2 = options.textColoring;
					if (_p2.ctor === 'Just') {
						return {
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Internal_Text$textColorClass(_p2._0),
							_1: {ctor: '[]'}
						};
					} else {
						return {ctor: '[]'};
					}
				}(),
				A2(
					_elm_lang$core$Basics_ops['++'],
					function () {
						var _p3 = options.aligned;
						if (_p3.ctor === 'Just') {
							return {
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Internal_Text$textAlignClass(_p3._0),
								_1: {ctor: '[]'}
							};
						} else {
							return {ctor: '[]'};
						}
					}(),
					options.attributes))));
};
var _rundis$elm_bootstrap$Bootstrap_Card_Internal$applyBlockModifier = F2(
	function (option, options) {
		var _p4 = option;
		switch (_p4.ctor) {
			case 'AlignedBlock':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						aligned: _elm_lang$core$Maybe$Just(_p4._0)
					});
			case 'BlockColoring':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						coloring: _elm_lang$core$Maybe$Just(_p4._0)
					});
			case 'BlockTextColoring':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						textColoring: _elm_lang$core$Maybe$Just(_p4._0)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						attributes: A2(_elm_lang$core$Basics_ops['++'], options.attributes, _p4._0)
					});
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Card_Internal$defaultBlockOptions = {
	aligned: _elm_lang$core$Maybe$Nothing,
	coloring: _elm_lang$core$Maybe$Nothing,
	textColoring: _elm_lang$core$Maybe$Nothing,
	attributes: {ctor: '[]'}
};
var _rundis$elm_bootstrap$Bootstrap_Card_Internal$blockAttributes = function (modifiers) {
	var options = A3(_elm_lang$core$List$foldl, _rundis$elm_bootstrap$Bootstrap_Card_Internal$applyBlockModifier, _rundis$elm_bootstrap$Bootstrap_Card_Internal$defaultBlockOptions, modifiers);
	return A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('card-body'),
			_1: {ctor: '[]'}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			function () {
				var _p5 = options.aligned;
				if (_p5.ctor === 'Just') {
					return {
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Internal_Text$textAlignClass(_p5._0),
						_1: {ctor: '[]'}
					};
				} else {
					return {ctor: '[]'};
				}
			}(),
			A2(
				_elm_lang$core$Basics_ops['++'],
				function () {
					var _p6 = options.coloring;
					if (_p6.ctor === 'Just') {
						return {
							ctor: '::',
							_0: A2(_rundis$elm_bootstrap$Bootstrap_Internal_Role$toClass, 'bg', _p6._0),
							_1: {ctor: '[]'}
						};
					} else {
						return {ctor: '[]'};
					}
				}(),
				A2(
					_elm_lang$core$Basics_ops['++'],
					function () {
						var _p7 = options.textColoring;
						if (_p7.ctor === 'Just') {
							return {
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Internal_Text$textColorClass(_p7._0),
								_1: {ctor: '[]'}
							};
						} else {
							return {ctor: '[]'};
						}
					}(),
					options.attributes))));
};
var _rundis$elm_bootstrap$Bootstrap_Card_Internal$renderBlock = function (block) {
	var _p8 = block;
	if (_p8.ctor === 'CardBlock') {
		return _p8._0;
	} else {
		return _p8._0;
	}
};
var _rundis$elm_bootstrap$Bootstrap_Card_Internal$renderBlocks = function (blocks) {
	return A2(
		_elm_lang$core$List$map,
		function (block) {
			var _p9 = block;
			if (_p9.ctor === 'CardBlock') {
				return _p9._0;
			} else {
				return _p9._0;
			}
		},
		blocks);
};
var _rundis$elm_bootstrap$Bootstrap_Card_Internal$CardOptions = F4(
	function (a, b, c, d) {
		return {aligned: a, coloring: b, textColoring: c, attributes: d};
	});
var _rundis$elm_bootstrap$Bootstrap_Card_Internal$BlockOptions = F4(
	function (a, b, c, d) {
		return {aligned: a, coloring: b, textColoring: c, attributes: d};
	});
var _rundis$elm_bootstrap$Bootstrap_Card_Internal$Attrs = function (a) {
	return {ctor: 'Attrs', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Card_Internal$TextColoring = function (a) {
	return {ctor: 'TextColoring', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Card_Internal$Coloring = function (a) {
	return {ctor: 'Coloring', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Card_Internal$Aligned = function (a) {
	return {ctor: 'Aligned', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Card_Internal$Outlined = function (a) {
	return {ctor: 'Outlined', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Card_Internal$Roled = function (a) {
	return {ctor: 'Roled', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Card_Internal$BlockAttrs = function (a) {
	return {ctor: 'BlockAttrs', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Card_Internal$BlockTextColoring = function (a) {
	return {ctor: 'BlockTextColoring', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Card_Internal$BlockColoring = function (a) {
	return {ctor: 'BlockColoring', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Card_Internal$AlignedBlock = function (a) {
	return {ctor: 'AlignedBlock', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Card_Internal$ListGroup = function (a) {
	return {ctor: 'ListGroup', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Card_Internal$listGroup = function (items) {
	return _rundis$elm_bootstrap$Bootstrap_Card_Internal$ListGroup(
		A2(
			_elm_lang$html$Html$ul,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('list-group list-group-flush'),
				_1: {ctor: '[]'}
			},
			A2(_elm_lang$core$List$map, _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$renderItem, items)));
};
var _rundis$elm_bootstrap$Bootstrap_Card_Internal$CardBlock = function (a) {
	return {ctor: 'CardBlock', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Card_Internal$block = F2(
	function (options, items) {
		return _rundis$elm_bootstrap$Bootstrap_Card_Internal$CardBlock(
			A2(
				_elm_lang$html$Html$div,
				_rundis$elm_bootstrap$Bootstrap_Card_Internal$blockAttributes(options),
				A2(
					_elm_lang$core$List$map,
					function (_p10) {
						var _p11 = _p10;
						return _p11._0;
					},
					items)));
	});
var _rundis$elm_bootstrap$Bootstrap_Card_Internal$BlockItem = function (a) {
	return {ctor: 'BlockItem', _0: a};
};
